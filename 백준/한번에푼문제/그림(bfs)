import java.util.*;

public class Main {

    public static void main(String[] args) {
	// write your code here
        Solution s = new Solution();
        s.solution();
    }
}

class Position {
    int x, y;

    public Position(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
class Solution {
    boolean[][] visit;
    int n;
    int m;
    int dx[] = {1, 0, -1, 0};
    int dy[] = {0, 1, 0, -1};
    int[][] arr;
    public void solution() {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();


        arr = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i][j] = sc.nextInt();
            }
        }
        visit = new boolean[n][m];
        int max = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (arr[i][j] != 0 && !visit[i][j]) {
                    cnt++;
                    max = Math.max(getCount(i, j), max);
                }
            }
        }
        System.out.println(cnt);
        System.out.println(max);

    }

    int getCount(int x, int y) {
        if (visit[x][y]) return 0;

        Queue<Position> q = new LinkedList<>();
        int count = 1;
        visit[x][y] = true;
        q.add(new Position(x, y));
        while (!q.isEmpty()) {
            Position now = q.poll();
            for (int i = 0; i < 4; i++) {
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];

                if (nx >= 0 && ny >= 0 && nx < n && ny < m) {
                    if (!visit[nx][ny] && arr[nx][ny] != 0) {
                        visit[nx][ny] = true;
                        q.add(new Position(nx, ny));
                        count++;
                    }
                }
            }
        }

        return count;
    }
}

