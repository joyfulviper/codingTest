import java.util.*;

public class Main {

    public static void main(String[] args) {
	// write your code here
        Solution s = new Solution();
        s.solution();
    }
}

class Position {
    int x, y, d;
    public Position(int x, int y, int d) {
        this.x = x;
        this.y = y;
        this.d = d;
    }
}
class Solution {

    public void solution() {
        Scanner sc = new Scanner(System.in);

        int n  = sc.nextInt();
        int m = sc.nextInt();

        sc.nextLine();


        int[][] arr = new int[n][m];

        boolean[][] visit = new boolean[n][m];

        int[][] d = new int[n][m];
        for (int i = 0; i < n; i++)
            Arrays.fill(d[i], Integer.MAX_VALUE);


        for (int i = 0; i < n; i++) {
            String s = sc.nextLine();
            for (int j = 0; j < m; j++) {
                arr[i][j] = Character.getNumericValue(s.charAt(j));
            }
        }

        Queue<Position> q = new LinkedList<>();

        q.add(new Position(0, 0, 1));

        int[] dx = {1, 0, -1, 0};
        int[] dy = {0, 1, 0, -1};

        while (!q.isEmpty()) {
            Position now = q.poll();

            for (int i = 0; i < 4; i++) {
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];

                if (nx >= 0 && ny >= 0 && nx < n && ny < m) {
                    if (!visit[nx][ny] && arr[nx][ny] != 0 && d[nx][ny] > now.d + 1) {
                        visit[nx][ny] = true;
                        q.add(new Position(nx ,ny, now.d + 1));
                        d[nx][ny] = now.d + 1;
                    }
                }
            }
        }
        System.out.println(d[n - 1][m - 1]);
    }
}

