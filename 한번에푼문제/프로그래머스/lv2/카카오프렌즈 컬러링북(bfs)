import java.util.*;

class Position {
    int x, y;
    public Position(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
class Solution {
    int numberOfArea = 0;
    int maxSizeOfOneArea = 0;
    boolean[][] visit;
    public int[] solution(int m, int n, int[][] picture) {
        
        
        int[] answer = new int[2];
        visit = new boolean[m][n];
        
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (picture[i][j] != 0 && !visit[i][j]) {
                    bfs(picture, i, j, picture[i][j]);
                }
            }
        }
        answer[0] = numberOfArea;
        answer[1] = maxSizeOfOneArea;
        return answer;
    }
    void bfs(int[][] picture, int x, int y, int color) {
        Queue<Position> q = new LinkedList<>();
        q.add(new Position(x, y));
        int[] dx = {1, 0, -1, 0};
        int[] dy = {0, 1, 0, -1};
        visit[x][y] = true;
        int cnt = 1;
        while(!q.isEmpty()) {
            Position now = q.poll();
            for (int i = 0; i < 4; i++) {
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];
                if(nx>=0&&ny>=0&&nx<picture.length&&ny<picture[0].length&&!visit[nx][ny] && picture[nx][ny] == color) {
                    visit[nx][ny] = true;
                    cnt++;
                    q.add(new Position(nx, ny));
                }
            }
        }
        numberOfArea++;
        
        maxSizeOfOneArea = Math.max(cnt, maxSizeOfOneArea);
    }
}
